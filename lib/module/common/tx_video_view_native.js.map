{"version":3,"sources":["tx_video_view_native.tsx"],"names":["React","Component","Platform","requireNativeComponent","TRTCCloudDef","TXSurfaceView","RtcVideoView","render","viewType","userId","streamType","otherProps","props","renderParams","fillMode","TRTC_VIDEO_RENDER_MODE_FILL","rotation","TRTC_VIDEO_ROTATION_0","mirrorType","TRTC_VIDEO_MIRROR_TYPE_AUTO","OS","TRTC_VideoView_TextureView","TXTextureView"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,sBAAnB,QAA4D,cAA5D;AACA,SAASC,YAAT,QAA6B,mBAA7B;;AAuBA;AACA;AACA;AACA,MAAMC,aAAa,GAAGF,sBAAsB,CAE1C,aAF0C,CAA5C;AAIA;AACA;AACA;;AACA,OAAO,MAAMG,YAAN,SAA2BL,SAA3B,CAAuE;AAC5EM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,MAAZ;AAAoBC,MAAAA,UAApB;AAAgC,SAAGC;AAAnC,QAAkD,KAAKC,KAA7D,CADO,CAEP;;AACA,QAAIC,YAAY,GAAG,KAAKD,KAAL,CAAWC,YAA9B;;AACA,QAAIA,YAAJ,EAAkB;AAChB,UAAI,CAACA,YAAY,CAACC,QAAlB,EAA4B;AAC1BD,QAAAA,YAAY,CAACC,QAAb,GAAwBV,YAAY,CAACW,2BAArC;AACD;;AACD,UAAI,CAACF,YAAY,CAACG,QAAlB,EAA4B;AAC1BH,QAAAA,YAAY,CAACG,QAAb,GAAwBZ,YAAY,CAACa,qBAArC;AACD;;AACD,UAAI,CAACJ,YAAY,CAACK,UAAlB,EAA8B;AAC5BL,QAAAA,YAAY,CAACK,UAAb,GAA0Bd,YAAY,CAACe,2BAAvC;AACD;;AACDN,MAAAA,YAAY,CAACH,UAAb,GAA0BA,UAA1B;AACAG,MAAAA,YAAY,CAACJ,MAAb,GAAsBA,MAAtB;AACD;;AACD,QACEP,QAAQ,CAACkB,EAAT,KAAgB,SAAhB,IACAZ,QAAQ,KAAKJ,YAAY,CAACiB,0BAF5B,EAGE;AACA,0BACE,oBAAC,aAAD;AACE,QAAA,IAAI,EAAE;AAAEZ,UAAAA,MAAF;AAAUC,UAAAA;AAAV,SADR;AAEE,QAAA,YAAY,EAAEG;AAFhB,SAGMF,UAHN,EADF;AAOD,KAXD,MAWO;AACL,0BACE,oBAAC,aAAD;AACE,QAAA,IAAI,EAAE;AAAEF,UAAAA,MAAF;AAAUC,UAAAA;AAAV,SADR;AAEE,QAAA,YAAY,EAAEG;AAFhB,SAGMF,UAHN,EADF;AAOD;AACF;;AAtC2E;AAyC9E;AACA;AACA;;AACA,MAAMW,aAAa,GAAGnB,sBAAsB,CAE1C,oBAF0C,CAA5C","sourcesContent":["import React, { Component } from 'react';\nimport { Platform, requireNativeComponent, ViewProps } from 'react-native';\nimport { TRTCCloudDef } from '../trtc_cloud_def';\n\nexport interface TXVideoViewProps {\n  userId: string;\n  viewType?: number;\n  streamType: number;\n  mirror?: boolean;\n}\n\ninterface TXRenderViewProps {\n  data: { userId: string; streamType: number };\n}\n\ninterface TRTCRenderParams {\n  renderParams?: {\n    rotation: number;\n    fillMode: number;\n    mirrorType: number;\n    streamType: number;\n    userId: string;\n  };\n}\n\n/**\n * @ignore\n */\nconst TXSurfaceView = requireNativeComponent<\n  TXRenderViewProps & TRTCRenderParams\n>('TXVideoView');\n\n/**\n * @ignore\n */\nexport class RtcVideoView extends Component<ViewProps & TXVideoViewProps, {}> {\n  render() {\n    const { viewType, userId, streamType, ...otherProps } = this.props;\n    // @ts-ignore\n    let renderParams = this.props.renderParams;\n    if (renderParams) {\n      if (!renderParams.fillMode) {\n        renderParams.fillMode = TRTCCloudDef.TRTC_VIDEO_RENDER_MODE_FILL;\n      }\n      if (!renderParams.rotation) {\n        renderParams.rotation = TRTCCloudDef.TRTC_VIDEO_ROTATION_0;\n      }\n      if (!renderParams.mirrorType) {\n        renderParams.mirrorType = TRTCCloudDef.TRTC_VIDEO_MIRROR_TYPE_AUTO;\n      }\n      renderParams.streamType = streamType;\n      renderParams.userId = userId;\n    }\n    if (\n      Platform.OS === 'android' &&\n      viewType === TRTCCloudDef.TRTC_VideoView_TextureView\n    ) {\n      return (\n        <TXTextureView\n          data={{ userId, streamType }}\n          renderParams={renderParams}\n          {...otherProps}\n        />\n      );\n    } else {\n      return (\n        <TXSurfaceView\n          data={{ userId, streamType }}\n          renderParams={renderParams}\n          {...otherProps}\n        />\n      );\n    }\n  }\n}\n\n/**\n * @ignore\n */\nconst TXTextureView = requireNativeComponent<\n  TXRenderViewProps & TRTCRenderParams\n>('TXVideoTextureView');\n"]}