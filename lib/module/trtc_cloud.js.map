{"version":3,"sources":["trtc_cloud.tsx"],"names":["NativeModules","NativeEventEmitter","Platform","TXAudioEffectManager","TXDeviceManager","TXBeautyManager","TRTCCloudListener","TRTCParams","TRTCVideoEncParam","TRTCSwitchRoomConfig","AudioMusicParam","TRTCAudioRecordingParams","TRTCPublishCDNParam","TRTCCloudDef","TXVoiceChangerType","TXVoiceReverbType","TXSystemVolumeType","TRTCNetworkQosParam","TRTCTranscodingConfig","TXVideoView","TrtcReactNativeSdk","TRTCEventEmitter","TRTCCloud","constructor","_listeners","Map","sharedInstance","_trtcCloud","destroySharedInstance","undefined","registerListener","listener","callback","args","params","OS","JSON","parse","e","console","log","type","addListener","set","remove","unRegisterListener","get","removeListener","unRegisterAllListener","clear","removeAllListeners","enterRoom","scene","sdkAppId","userId","userSig","roomId","toString","strRoomId","role","streamId","userDefineRecordId","privateMapKey","businessInfo","exitRoom","getAudioEffectManager","getBeautyManager","getDeviceManager","getSDKVersion","connectOtherRoom","param","disconnectOtherRoom","switchRole","setDefaultStreamRecvMode","autoRecvAudio","autoRecvVideo","switchRoom","config","stringify","setVideoMuteImage","image","fps","imageUrl","setWatermark","streamType","x","y","width","startPublishing","stopPublishing","startPublishCDNStream","stopPublishCDNStream","setMixTranscodingConfig","muteLocalVideo","mute","muteRemoteVideoStream","setRemoteRenderParams","setVideoEncoderParam","setNetworkQosParam","setVideoEncoderRotation","rotation","setVideoEncoderMirror","mirror","setGSensorMode","mode","muteAllRemoteVideoStreams","startLocalAudio","quality","stopLocalAudio","stopLocalPreview","stopRemoteView","muteLocalAudio","muteRemoteAudio","muteAllRemoteAudio","setRemoteAudioVolume","volume","setAudioCaptureVolume","getAudioCaptureVolume","setAudioPlayoutVolume","getAudioPlayoutVolume","enableAudioVolumeEvaluation","intervalMs","startAudioRecording","stopAudioRecording","enable3DSpatialAudioEffect","enabled","updateSelf3DSpatialPosition","position","axisForward","axisRight","axisUp","map","p","a","updateRemote3DSpatialPosition","set3DSpatialReceivingRange","range","startSpeedTest","stopSpeedTest","setLogLevel","level","setConsoleEnabled","setLogCompressEnabled","setLogDirPath","path","callExperimentalAPI","jsonStr"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\nimport TXAudioEffectManager from './tx_audio_effect_manager';\nimport TXDeviceManager from './tx_device_manager';\nimport TXBeautyManager from './tx_beauty_manager';\n\nimport { TRTCCloudListener } from './trtc_cloud_listener';\nimport {\n  TRTCParams,\n  TRTCVideoEncParam,\n  TRTCSwitchRoomConfig,\n  AudioMusicParam,\n  TRTCAudioRecordingParams,\n  TRTCPublishCDNParam,\n  TRTCCloudDef,\n  TXVoiceChangerType,\n  TXVoiceReverbType,\n  TXSystemVolumeType,\n  TRTCNetworkQosParam,\n  TRTCTranscodingConfig,\n  TRTCRenderParams,\n} from './trtc_cloud_def';\nimport TXVideoView from './tx_video_view';\nconst { TrtcReactNativeSdk } = NativeModules;\nconst TRTCEventEmitter = new NativeEventEmitter(TrtcReactNativeSdk);\n\nexport default class TRTCCloud {\n  static _trtcCloud: TRTCCloud | undefined;\n  private _listeners: Map<any, any>;\n  constructor() {\n    this._listeners = new Map();\n  }\n  /**\n  创建 TRTCCloud 单例。\n  */\n  static sharedInstance() {\n    if (!this._trtcCloud) {\n      this._trtcCloud = new TRTCCloud();\n      TrtcReactNativeSdk.sharedInstance();\n    }\n    return this._trtcCloud;\n  }\n  /**\n  销毁 TRTCCloud 单例。\n  */\n  static destroySharedInstance() {\n    this._trtcCloud = undefined;\n    TrtcReactNativeSdk.destroySharedInstance();\n  }\n\n  /**\n   * 添加事件\n   * @param event\n   * @param listener\n   * @returns {{remove: remove}}\n   */\n  registerListener(listener: { (type: TRTCCloudListener, params: any): void }) {\n    const callback = (args: { params: any; type: TRTCCloudListener }) => {\n      let params;\n      if (Platform.OS === 'android') {\n        try {\n          params = JSON.parse(args.params);\n        } catch (e) {\n          console.log(e);\n        }\n      } else {\n        params = args.params;\n      }\n      listener(args.type, params);\n    };\n    TRTCEventEmitter.addListener('onListener', callback);\n    this._listeners.set(listener, callback);\n    return {\n      remove: () => {\n        this.unRegisterListener(listener);\n      },\n    };\n  }\n\n  /**\n   * 移除事件\n   * @param event\n   * @param listener\n   */\n  unRegisterListener(listener: {\n    (type: TRTCCloudListener, params: any): void;\n  }) {\n    const callback = this._listeners.get(listener);\n    if (!callback) {\n      return;\n    }\n    TRTCEventEmitter.removeListener('onListener', callback);\n  }\n\n  /**\n   * 移除所有事件\n   * @param event\n   * @param listener\n   */\n  unRegisterAllListener() {\n    this._listeners.clear();\n    TRTCEventEmitter.removeAllListeners('onListener');\n  }\n  /**\n  - 进入房间\n  - 调用接口后，您会收到来自 TRTCCloudListener 中的 onEnterRoom(result) 回调：\n  - 如果加入成功，result 会是一个正数（result > 0），表示加入房间所消耗的时间，单位是毫秒（ms）。\n  - 如果加入失败，result 会是一个负数（result < 0），表示进房失败的错误码。\n  @param param\t进房参数，请参考 trtc_cloud_def.dart文件中的TRTCParams参数定义\n  @param scene\t应用场景，目前支持视频通话（VideoCall）、在线直播（Live）、语音通话（AudioCall）、语音聊天室（VoiceChatRoom）四种场景。\n  - 注意：\n  - 1.当 scene 选择为 TRTC_APP_SCENE_LIVE 或 TRTC_APP_SCENE_VOICE_CHATROOM 时，您必须通过 TRTCParams 中的 role 字段指定当前用户的角色。\n  - 2.不管进房是否成功，enterRoom 都必须与 exitRoom 配对使用，在调用 exitRoom 前再次调用 enterRoom 函数会导致不可预期的错误问题。\n  */\n  enterRoom(params: TRTCParams, scene: number): Promise<void> {\n    if (Platform.OS === 'android') {\n      return TrtcReactNativeSdk.enterRoom(\n        {\n          sdkAppId: params.sdkAppId,\n          userId: params.userId,\n          userSig: params.userSig,\n          roomId: params.roomId!.toString(),\n          strRoomId: params.strRoomId,\n          role: params.role,\n          streamId: params.streamId,\n          userDefineRecordId: params.userDefineRecordId,\n          privateMapKey: params.privateMapKey,\n          businessInfo: params.businessInfo,\n          scene: scene,\n        },\n        scene\n      );\n    }\n    return TrtcReactNativeSdk.enterRoom(params, scene);\n  }\n  /**\n  - 离开房间。\n  - 调用 exitRoom() 接口会执行退出房间的相关逻辑，例如释放音视频设备资源和编解码器资源等。 待资源释放完毕，SDK 会通过 onExitRoom() 回调通知到您。\n  - 如果您要再次调用 enterRoom() 或者切换到其他的音视频 SDK，请等待 onExitRoom() 回调到来之后再执行相关操作。 否则可能会遇到摄像头或麦克风被占用等各种异常问题，例如常见的 Android 媒体音量和通话音量切换问题等等。\n  */\n  exitRoom(): Promise<void> {\n    return TrtcReactNativeSdk.exitRoom();\n  }\n  /**\n  - 获取音效管理类 TXAudioEffectManager。\n  @return TXAudioEffectManager\n  */\n  getAudioEffectManager(): TXAudioEffectManager {\n    TrtcReactNativeSdk.getAudioEffectManager();\n    return new TXAudioEffectManager();\n  }\n\n  /**\n  - 获取美颜管理类 TXBeautyManager\n  @return TXBeautyManager\n  */\n  getBeautyManager(): TXBeautyManager {\n    TrtcReactNativeSdk.getBeautyManager();\n    return new TXBeautyManager();\n  }\n\n  /**\n  - 获取设备管理模块。\n  @return TXDeviceManager\n  */\n  getDeviceManager(): TXDeviceManager {\n    TrtcReactNativeSdk.getDeviceManager();\n    return new TXDeviceManager();\n  }\n\n  /**\n  - 获取 SDK 版本信息\n  @return 版本号信息\n  */\n  getSDKVersion(): Promise<string> {\n    return TrtcReactNativeSdk.getSDKVersion();\n  }\n  /**\n  - 请求跨房通话（主播 PK）\n  - TRTC 中两个不同音视频房间中的主播，可以通过“跨房通话”功能拉通连麦通话功能。使用此功能时， 两个主播无需退出各自原来的直播间即可进行“连麦 PK”。\n  - 例如：当房间“001”中的主播 A 通过 connectOtherRoom() 跟房间“002”中的主播 B 拉通跨房通话后， 房间“001”中的用户都会收到主播 B 的 onRemoteUserEnterRoom(B) 回调和 onUserVideoAvailable(B,true) 回调。 房间“002”中的用户都会收到主播 A 的 onRemoteUserEnterRoom(A) 回调和 onUserVideoAvailable(A,true) 回调。\n  - 简言之，跨房通话的本质，就是把两个不同房间中的主播相互分享，让每个房间里的观众都能看到两个主播。\n  - 跨房通话的参数考虑到后续扩展字段的兼容性问题，暂时采用了 JSON 格式的参数，要求至少包含两个字段：\n  - roomId：房间“001”中的主播 A 要跟房间“002”中的主播 B 连麦，主播 A 调用 ConnectOtherRoom() 时 roomId 应指定为“002”。\n  - userId：房间“001”中的主播 A 要跟房间“002”中的主播 B 连麦，主播 A 调用 ConnectOtherRoom() 时 userId 应指定为 B 的 userId。\n  - 跨房通话的请求结果会通过 onConnectOtherRoom() 回调通知给您。\n  - 调用示例：\n  - var object = new Map();\n  - object['roomId'] = 155;\n  - object['userId'] = '57890';\n  - trtcCloud.connectOtherRoom(jsonEncode(object));\n  @param param\tJSON 字符串连麦参数，roomId 代表目标房间号，userId 代表目标用户 ID。\n  */\n  connectOtherRoom(param: string): Promise<void> {\n    return TrtcReactNativeSdk.connectOtherRoom({\n      param: param,\n    });\n  }\n  /**\n  - 退出跨房通话\n  - 跨房通话的退出结果会通过onDisconnectOtherRoom 回调通知给您。\n  */\n  disconnectOtherRoom(): Promise<void> {\n    return TrtcReactNativeSdk.disconnectOtherRoom();\n  }\n  /**\n  - 切换角色，仅适用于直播场景（TRTC_APP_SCENE_LIVE 和 TRTC_APP_SCENE_VOICE_CHATROOM）。\n  - 在直播场景下，一个用户可能需要在“观众”和“主播”之间来回切换。 您可以在进房前通过 TRTCParams 中的 role 字段确定角色，也可以通过 switchRole 在进房后切换角色。\n  @param role\t目标角色，默认为主播：TRTCCloudDef.TRTCRoleAnchor 主播，可以上行视频和音频，一个房间里最多支持50个主播同时上行音视频。TRTCCloudDef.TRTCRoleAudience 观众，只能观看，不能上行视频和音频，一个房间里的观众人数没有上限。\n  */\n  switchRole(role: number): Promise<void> {\n    return TrtcReactNativeSdk.switchRole({\n      role: role,\n    });\n  }\n  /**\n  - 设置音视频数据接收模式（需要在进房前设置才能生效）。\n  - 为实现进房秒开的绝佳体验，SDK 默认进房后自动接收音视频。即在您进房成功的同时，您将立刻收到远端所有用户的音视频数据。 若您没有调用 startRemoteView，视频数据将自动超时取消。 若您主要用于语音聊天等没有自动接收视频数据需求的场景，您可以根据实际需求选择接收模式。\n  @param autoRecvAudio\ttrue：自动订阅音频；false：需手动调用 muteRemoteAudio(false) 订阅音频。默认值：true。\n  @param autoRecvVideo true：自动订阅视频；false：需手动调用 startRemoteView 订阅视频。默认值：true。\n  */\n  setDefaultStreamRecvMode(\n    autoRecvAudio: boolean,\n    autoRecvVideo: boolean\n  ): Promise<void> {\n    return TrtcReactNativeSdk.setDefaultStreamRecvMode({\n      autoRecvAudio: autoRecvAudio,\n      autoRecvVideo: autoRecvVideo,\n    });\n  }\n  /**\n  - 切换房间\n  - 调用接口后，会退出原来的房间，并且停止原来房间的音视频数据发送和所有远端用户的音视频播放，但不会停止本地视频的预览。 进入新房间成功后，会自动恢复原来的音视频数据发送状态。\n  - 接口调用结果会通过onSwitchRoom(errCode, errMsg) 回调。\n  @param config\t房间参数，详情请参考 TRTCSwitchRoomConfig\n  */\n  switchRoom(config: TRTCSwitchRoomConfig): Promise<void> {\n    return TrtcReactNativeSdk.switchRoom({\n      config: JSON.stringify(config),\n    });\n  }\n\n  /**\n  - 设置暂停推送本地视频时要推送的图片\n  - 当暂停推送本地视频后，会继续推送该接口设置的图片\n  - 暂时只支持传递网络图片\n  - @param image 设置要推送的图片。 \"\" 表示不推送\n  - @param fps\t设置推送图片帧率，最小值为5，最大值为20，默认10\n  */\n  setVideoMuteImage(image: string, fps: number): Promise<void> {\n    return TrtcReactNativeSdk.setVideoMuteImage({\n      imageUrl: image,\n      fps,\n    });\n  }\n\n  /**\n  - 添加水印\n  - 水印的位置是通过 rect 参数来指定的，rect 是一个四元组参数，其格式为 (x，y，width，height)\n  - x：水印的坐标，取值范围为0 - 1的浮点数。\n  - y：水印的坐标，取值范围为0 - 1的浮点数。\n  - width：水印的宽度，取值范围为0 - 1的浮点数。\n  - height：是不用设置的，SDK 内部会根据水印图片的宽高比自动计算一个合适的高度。\n  - 参数设置举例： 如果当前视频的编码分辨率是 540 × 960，且 rect 参数被您设置为（0.1，0.1，0.2，0.0）， 那么水印的左上坐标点就是（540 × 0.1，960 × 0.1）即（54，96），水印的宽度是 540 × 0.2 = 108px，水印的高度会根据水印图片的宽高比由 SDK 自动算出。\n  - @param image 水印图片，**必须使用透明底色的 png 格式**\n  - @param streamType\t指定给哪一路画面设置水印\n  - @param rect 水印相对于编码分辨率的归一化坐标，x，y，width，height 取值范围0 - 1。\n  - 注意：如果您要给主画面（一般为摄像头）和辅路画面（一般用作屏幕分享）同时设置水印，需要调用该接口两次，并设定不同的 streamType。\n  */\n  setWatermark(\n    image: string,\n    streamType: number,\n    x: number,\n    y: number,\n    width: number\n  ): Promise<void> {\n    return TrtcReactNativeSdk.setWatermark({\n      imageUrl: image,\n      streamType,\n      x: x.toString(),\n      y: y.toString(),\n      width: width.toString(),\n    });\n  }\n\n  /**\n  - 开始向腾讯云的直播 CDN 推流\n  - 该接口会指定当前用户的音视频流在腾讯云 CDN 所对应的 StreamId，进而可以指定当前用户的 CDN 播放地址。\n  - 例如：如果我们采用如下代码设置当前用户的主画面 StreamId 为 user_stream_001，那么该用户主画面对应的 CDN 播放地址为： “http://yourdomain/live/user_stream_001.flv”，其中 yourdomain 为您自己备案的播放域名， 您可以在[直播控制台](https://console.cloud.tencent.com/live) 配置您的播放域名，腾讯云不提供默认的播放域名。\n  - 您也可以在设置 enterRoom 的参数 TRTCParams 时指定 streamId, 而且我们更推荐您采用这种方案。\n  @param streamId\t自定义流 ID。\n  @param streamType\t仅支持 TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG 和 TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_SUB。\n  - 注意：\n  - 您需要先在实时音视频 [控制台](https://console.cloud.tencent.com/trtc) 中的功能配置页开启“启用旁路推流”才能生效。\n  - *若您选择“指定流旁路”，则您可以通过该接口将对应音视频流推送到腾讯云 CDN 且指定为填写的流 ID。\n  - *若您选择“全局自动旁路”，则您可以通过该接口调整默认的流 ID。\n  */\n  startPublishing(streamId: string, streamType: number): Promise<void> {\n    return TrtcReactNativeSdk.startPublishing({\n      streamId: streamId,\n      streamType: streamType,\n    });\n  }\n  /**\n  停止向腾讯云的直播 CDN 推流\n  */\n  stopPublishing(): Promise<void> {\n    return TrtcReactNativeSdk.stopPublishing();\n  }\n  /**\n  - 开始向友商云的直播 CDN 转推\n  - 该接口跟 startPublishing() 类似，但 startPublishCDNStream() 支持向非腾讯云的直播 CDN 转推。\n  - @param\tCDN 转推参数，请参考 TRTCPublishCDNParam\n  - 注意：\n  - 使用 startPublishing() 绑定腾讯云直播 CDN 不收取额外的费用，但使用 startPublishCDNStream() 绑定非腾讯云直播 CDN 需要收取转推费用。\n  */\n  startPublishCDNStream(param: TRTCPublishCDNParam): Promise<void> {\n    return TrtcReactNativeSdk.startPublishCDNStream({\n      param: JSON.stringify(param),\n    });\n  }\n  /**\n  停止向非腾讯云地址转推\n  */\n  stopPublishCDNStream(): Promise<void> {\n    return TrtcReactNativeSdk.stopPublishCDNStream();\n  }\n\n  /**\n  - 设置云端混流的排版布局和转码参数\n  - 如果您在实时音视频 控制台 中的功能配置页开启了“启用旁路推流”功能， 房间里的每一路画面都会有一个默认的直播 CDN 地址。\n  - 一个直播间中可能有不止一位主播，而且每个主播都有自己的画面和声音，但对于 CDN 观众来说，他们只需要一路直播流， 所以您需要将多路音视频流混成一路标准的直播流，这就需要混流转码。\n  - 当您调用 setMixTranscodingConfig() 接口时，SDK 会向腾讯云的转码服务器发送一条指令，目的是将房间里的多路音视频流混合为一路, 您可以通过 mixUsers 参数来调整每一路画面的位置，以及是否只混合声音，也可以通过 videoWidth、videoHeight、videoBitrate 等参数控制混合音视频流的编码参数。\n  - 参考文档：[云端混流转码](https://cloud.tencent.com/document/product/647/16827)。\n  - @param\t如果 config 不为空，则开启云端混流，如果 config 为空则停止云端混流。详情请参考 TRTCTranscodingConfig\n  */\n  setMixTranscodingConfig(config: TRTCTranscodingConfig): Promise<void> {\n    return TrtcReactNativeSdk.setMixTranscodingConfig({\n      config: JSON.stringify(config),\n    });\n  }\n\n  /**\n  - 暂停/恢复推送本地的视频数据。\n  - 当暂停推送本地视频后，房间里的其它成员将会收到 onUserVideoAvailable(userId, false) 回调通知 当恢复推送本地视频后，房间里的其它成员将会收到 onUserVideoAvailable(userId, true) 回调通知。\n  */\n  muteLocalVideo(mute: boolean): Promise<void> {\n    return TrtcReactNativeSdk.muteLocalVideo({ mute: mute });\n  }\n\n  /**\n  - 暂停/恢复接收指定的远端视频流。\n  - 该接口仅暂停/恢复接收指定的远端用户的视频流，但并不释放显示资源，视频画面会冻屏在 mute 前的最后一帧。\n  - 您在 enterRoom 之前或之后调用此 API 均能生效，在您调用 exitRoom 之后会被重置为 False。\n  @param userId\t指定远端用户的 ID。\n  @param mute\t是否暂停接收。\n  */\n  muteRemoteVideoStream(userId: string, mute: boolean): Promise<void> {\n    return TrtcReactNativeSdk.muteRemoteVideoStream({\n      userId,\n      mute,\n    });\n  }\n\n  /**\n  - 设置远端画面的渲染模式。\n  - 可设置的参数包括有：画面的旋转角度、填充模式以及左右镜像等。\n  @param userId\t指定远端用户的 ID。\n  @param streamType\t可以设置为主路画面（TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG）或辅路画面（TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_SUB）\n  @param param\t画面渲染参数。\n  */\n  setRemoteRenderParams(\n    userId: string,\n    streamType: number,\n    param: TRTCRenderParams\n  ): Promise<void> {\n    return TrtcReactNativeSdk.setRemoteRenderParams({\n      userId,\n      streamType,\n      param: JSON.stringify(param),\n    });\n  }\n\n  /**\n  - 设置视频编码器相关参数\n  - 该设置决定了远端用户看到的画面质量（同时也是云端录制出的视频文件的画面质量）\n  @param param\t用于设置视频编码器的相关参数，详情请参考 TRTCVideoEncParam。\n  */\n  setVideoEncoderParam(param: TRTCVideoEncParam): Promise<void> {\n    return TrtcReactNativeSdk.setVideoEncoderParam({\n      param: JSON.stringify(param),\n    });\n  }\n\n  /**\n  - 设置网络流控相关参数\n  - 该设置决定 SDK 在各种网络环境下的调控策略（例如弱网下选择“保清晰”或“保流畅”）\n  @param 用于设置网络质量控制的相关参数，详情请参考 TRTCNetworkQosParam\n  */\n  setNetworkQosParam(param: TRTCNetworkQosParam): Promise<void> {\n    return TrtcReactNativeSdk.setNetworkQosParam({\n      param: JSON.stringify(param),\n    });\n  }\n\n  /**\n  - 设置视频编码输出的画面方向，即设置远端用户观看到的和服务器录制的画面方向\n  - 当用户的手机或者 Android Pad 做了一个180度旋转时，由于摄像头的采集方向没有变，所以另一边的用户看到的画面是上下颠倒的， 在这种情况下，您可以通过该接口将 SDK 输出到对方的画面旋转180度，这样可以可以确保对方看到的画面依然正常。\n  - TRTCCloudDef.TRTC_VIDEO_ROTATION_0，不旋转（默认值）\n  - TRTCCloudDef.TRTC_VIDEO_ROTATION_180，顺时针旋转180度\n  @param rotation\t目前支持0和180两个旋转角度，默认值：TRTCVideoRotation_0，即不旋转。\n  */\n  setVideoEncoderRotation(rotation: number): Promise<void> {\n    return TrtcReactNativeSdk.setVideoEncoderRotation({\n      rotation,\n    });\n  }\n\n  /**\n  - 设置编码器输出的画面镜像模式\n  - 该接口不改变本地摄像头的预览画面，但会改变另一端用户看到的（以及服务器录制下来的）画面效果。\n  @param mirror\ttrue：镜像；false：不镜像；默认值：false\n  */\n  setVideoEncoderMirror(mirror: boolean): Promise<void> {\n    return TrtcReactNativeSdk.setVideoEncoderMirror({\n      mirror,\n    });\n  }\n\n  /**\n  - 设置重力感应的适应模式\n  @param 参数 mode\t重力感应模式：\n  - TRTCCloudDef.TRTC_GSENSOR_MODE_DISABLE ：关闭重力感应\n  - TRTCCloudDef.TRTC_GSENSOR_MODE_UIFIXLAYOUT ：开启重力感应，SDK 会自动调整远端用户和本地 View 的画面旋转方向。\n  - TRTCCloudDef.TRTC_GSENSOR_MODE_UIAUTOLAYOUT：关闭重力感应，SDK 会自动调整远端用户看到的画面方向，但不会调整本地 View 的画面旋转方向。 如果您的 App 界面开启了重力感应适配选项，推荐选择该模式，否则 SDK 的方向调整逻辑会跟系统的发生冲突。\n  */\n  setGSensorMode(mode: number): Promise<void> {\n    return TrtcReactNativeSdk.setGSensorMode({\n      mode,\n    });\n  }\n\n  /**\n  - 暂停/恢复接收所有远端视频流。\n  - 该接口仅暂停/恢复接收所有远端用户的视频流，但并不释放显示资源，视频画面会冻屏在 mute 前的最后一帧。\n  - 您在 enterRoom 之前或之后调用此 API 均能生效，在您调用 exitRoom 之后会被重置为 False。\n  @param mute\t是否暂停接收\n  */\n  muteAllRemoteVideoStreams(mute: boolean): Promise<void> {\n    return TrtcReactNativeSdk.muteAllRemoteVideoStreams({\n      mute,\n    });\n  }\n\n  /**\n  - 开启本地音频的采集和上行,并设置音频质量。\n  - 该函数会启动麦克风采集，并将音频数据传输给房间里的其他用户。 SDK 不会默认开启本地音频采集和上行，您需要调用该函数开启，否则房间里的其他用户将无法听到您的声音。\n  - 主播端的音质越高，观众端的听感越好，但传输所依赖的带宽也就越高，在带宽有限的场景下也更容易出现卡顿。\n  @param quality\t声音音质\n  - TRTCAudioQualitySpeech，流畅：采样率：16k；单声道；音频裸码率：16kbps；适合语音通话为主的场景，比如在线会议，语音通话。\n  - TRTCAudioQualityDefault，默认：采样率：48k；单声道；音频裸码率：50kbps；SDK 默认的音频质量，如无特殊需求推荐选择之。\n  - TRTCAudioQualityMusic，高音质：采样率：48k；双声道 + 全频带；音频裸码率：128kbps；适合需要高保真传输音乐的场景，比如在线K歌、音乐直播等。\n  */\n  startLocalAudio(quality: number): Promise<void> {\n    return TrtcReactNativeSdk.startLocalAudio({ quality: quality });\n  }\n  /**\n  - 关闭本地音频的采集和上行。\n  - 当关闭本地音频的采集和上行，房间里的其它成员会收到 onUserAudioAvailable(false) 回调通知。\n  */\n  stopLocalAudio(): Promise<void> {\n    return TrtcReactNativeSdk.stopLocalAudio();\n  }\n\n  /**\n  - 关闭本地视频的采集和上行。\n  */\n  stopLocalPreview(): Promise<void> {\n    return TrtcReactNativeSdk.stopLocalPreview();\n  }\n\n  /**\n  - 取消订阅远端视频\n  @param streamType\t仅支持 TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG 和 TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_SUB。\n  */\n  stopRemoteView(userId: String, streamType: number): Promise<void> {\n    return TrtcReactNativeSdk.stopRemoteView({\n      userId: userId,\n      streamType: streamType,\n    });\n  }\n\n  /**\n  - 静音/取消静音本地的音频。\n  - 当静音本地音频后，房间里的其它成员会收到 onUserAudioAvailable(userId, false) 回调通知。 当取消静音本地音频后，房间里的其它成员会收到 onUserAudioAvailable(userId, true) 回调通知。\n  - 与 stopLocalAudio 不同之处在于，muteLocalAudio(true) 并不会停止发送音视频数据，而是继续发送码率极低的静音包。 由于 MP4 等视频文件格式，对于音频的连续性是要求很高的，使用 stopLocalAudio 会导致录制出的 MP4 不易播放。 因此在对录制质量要求很高的场景中，建议选择 muteLocalAudio，从而录制出兼容性更好的 MP4 文件。\n  @param mute\ttrue：静音；false：取消静音\n  */\n  muteLocalAudio(mute: boolean): Promise<void> {\n    return TrtcReactNativeSdk.muteLocalAudio({\n      mute: mute,\n    });\n  }\n  /**\n  - 静音/取消静音指定的远端用户的声音。\n  @param userId\t对方的用户 ID\n  @param mute\ttrue：静音；false：取消静音\n  - 注意：静音时会停止接收该用户的远端音频流并停止播放，取消静音时会自动拉取该用户的远端音频流并进行播放。\n  */\n  muteRemoteAudio(userId: string, mute: boolean): Promise<void> {\n    return TrtcReactNativeSdk.muteRemoteAudio({\n      userId: userId,\n      mute: mute,\n    });\n  }\n  /**\n  - 静音/取消静音所有用户的声音。\n  @param mute\ttrue：静音；false：取消静音\n  - 注意：静音时会停止接收所有用户的远端音频流并停止播放，取消静音时会自动拉取所有用户的远端音频流并进行播放。\n  */\n  muteAllRemoteAudio(mute: boolean): Promise<void> {\n    return TrtcReactNativeSdk.muteAllRemoteAudio({\n      mute: mute,\n    });\n  }\n  /**\n  - 设置某个远程用户的播放音量\n  @param userId\t远程用户 ID\n  - volume\t音量大小，取值0 - 100\n  */\n  setRemoteAudioVolume(userId: string, volume: number): Promise<void> {\n    return TrtcReactNativeSdk.setRemoteAudioVolume({\n      userId: userId,\n      volume: volume,\n    });\n  }\n  /**\n  - 设置 SDK 采集音量。\n  @param volume\t音量大小，取值0 - 100\n  */\n  setAudioCaptureVolume(volume: number): Promise<void> {\n    return TrtcReactNativeSdk.setAudioCaptureVolume({\n      volume: volume,\n    });\n  }\n  /**\n  获取 SDK 采集音量。\n  */\n  getAudioCaptureVolume(): Promise<number> {\n    return TrtcReactNativeSdk.getAudioCaptureVolume();\n  }\n  /**\n  - 设置 SDK 播放音量。\n  - 该函数会控制最终交给系统播放的声音音量，会影响录制本地音频文件的音量大小，但不会影响耳返的音量。\n  @param volume\t音量大小，取值0 - 100\n  */\n  setAudioPlayoutVolume(volume: number): Promise<void> {\n    return TrtcReactNativeSdk.setAudioPlayoutVolume({\n      volume: volume,\n    });\n  }\n  /**\n  获取 SDK 播放音量\n  */\n  getAudioPlayoutVolume(): Promise<number> {\n    return TrtcReactNativeSdk.getAudioPlayoutVolume();\n  }\n  /**\n  - 启用音量大小提示。\n  - 开启后会在 onUserVoiceVolume 中获取到 SDK 对音量大小值的评估。如需打开此功能，请在 startLocalAudio() 之前调用。\n  @param intervalMs\t决定了 onUserVoiceVolume 回调的触发间隔，单位为ms，最小间隔为100ms，如果小于等于0则会关闭回调，建议设置为300ms；详细的回调规则请参考 onUserVoiceVolume 的注释说明\n  */\n  enableAudioVolumeEvaluation(intervalMs: number): Promise<void> {\n    return TrtcReactNativeSdk.enableAudioVolumeEvaluation({\n      intervalMs: intervalMs,\n    });\n  }\n  /**\n  - 开始录音。\n  - 该方法调用后， SDK 会将通话过程中的所有音频（包括本地音频，远端音频，BGM 等）录制到一个文件里。 无论是否进房，调用该接口都生效。 如果调用 exitRoom 时还在录音，录音会自动停止。\n  @param TRTCAudioRecordingParams\t录音参数\n  @return 0：成功；-1：录音已开始；-2：文件或目录创建失败；-3：后缀指定的音频格式不支持; -1001:参数错误\n  */\n  startAudioRecording(param: TRTCAudioRecordingParams): Promise<number> {\n    return TrtcReactNativeSdk.startAudioRecording({\n      param: param,\n    });\n  }\n  /**\n  - 停止录音。\n  - 如果调用 exitRoom 时还在录音，录音会自动停止。\n  */\n  stopAudioRecording(): Promise<void> {\n    return TrtcReactNativeSdk.stopAudioRecording();\n  }\n  /**\n  - 启用 3D 音效。\n  - 启用 3D 音效。注意需使用流畅音质 TRTCAudioQualitySpeech 或默认音质 TRTCAudioQualityDefault。\n  @param enabled\t是否启用 3D 音效，默认为关闭状态。\n  */\n  enable3DSpatialAudioEffect(enabled: boolean): Promise<void> {\n    return TrtcReactNativeSdk.enable3DSpatialAudioEffect({\n      enabled: enabled,\n    });\n  }\n  /**\n  - 设置 3D 音效中自身坐标及朝向信息。\n  - 更新自身在世界坐标系中的位置和朝向， SDK 会根据该方法参数计算自身和远端用户之间的相对位置，进而渲染出空间音效。注意各参数应分别传入长度为 3 的数组。\n  @param position\t自身在世界坐标系中的坐标，三个值依次表示前、右、上坐标值。\n  @param axisForward\t自身坐标系前轴在世界坐标系中的单位向量，三个值依次表示前、右、上坐标值。\n  @param axisRight\t自身坐标系右轴在世界坐标系中的单位向量，三个值依次表示前、右、上坐标值。\n  @param axisUp\t自身坐标系上轴在世界坐标系中的单位向量，三个值依次表示前、右、上坐标值。\n  */\n  updateSelf3DSpatialPosition(\n    position: number[],\n    axisForward: number[],\n    axisRight: number[],\n    axisUp: number[]\n  ): Promise<void> {\n    return TrtcReactNativeSdk.updateSelf3DSpatialPosition({\n      position: position.map((p) => p.toString()),\n      axisForward: axisForward.map((a) => a.toString()),\n      axisRight: axisRight.map((a) => a.toString()),\n      axisUp: axisUp.map((a) => a.toString()),\n    });\n  }\n  /**\n  - 设置 3D 音效中远端用户坐标信息。\n  - 更新远端用户在世界坐标系中的位置，SDK 会根据自身和远端用户之间的相对位置，进而渲染出空间音效。注意参数为长度等于 3 的数组。\n  @param userId\t指定远端用户的 ID。\n  @param position\t该远端用户在世界坐标系中的坐标，三个值依次表示前、右、上坐标值。\n  */\n  updateRemote3DSpatialPosition(\n    userId: string,\n    position: number[]\n  ): Promise<void> {\n    return TrtcReactNativeSdk.updateRemote3DSpatialPosition({\n      userId: userId,\n      position: position.map((p) => p.toString()),\n    });\n  }\n  /**\n  - 设置指定用户所发出声音的可被接收范围。\n  - 设置该范围大小之后，该指定用户的声音将在该范围内可被听见，超出该范围将被衰减为 0。\n  @param userId\t指定远端用户的 ID。\n  @param range\t声音最大可被接收范围。\n  */\n  set3DSpatialReceivingRange(userId: string, range: number): Promise<void> {\n    return TrtcReactNativeSdk.set3DSpatialReceivingRange({\n      userId: userId,\n      range: range,\n    });\n  }\n  /**\n  - 开始进行网络测速（视频通话期间请勿测试，以免影响通话质量）\n  - 测速结果将会用于优化 SDK 接下来的服务器选择策略，因此推荐您在用户首次通话前先进行一次测速，这将有助于我们选择最佳的服务器。 同时，如果测试结果非常不理想，您可以通过醒目的 UI 提示用户选择更好的网络。 测试结果通过 TRTCCloudListener.onSpeedTest 回调出来。\n  - 注意：测速本身会消耗一定的流量，所以也会产生少量额外的流量费用。\n  @param sdkAppId\t应用标识\n  @param userId\t用户标识\n  @param userSig\t用户签名\n  */\n  startSpeedTest(\n    sdkAppId: number,\n    userId: string,\n    userSig: string\n  ): Promise<void> {\n    return TrtcReactNativeSdk.startSpeedTest({\n      sdkAppId: sdkAppId,\n      userId: userId,\n      userSig: userSig,\n    });\n  }\n  /**\n  停止服务器测速。\n  */\n  stopSpeedTest(): Promise<void> {\n    return TrtcReactNativeSdk.stopSpeedTest();\n  }\n  /**\n  - 设置 Log 输出级别\n  @param level\t请参见 TRTC_LOG_LEVEL，默认值：TRTCCloudDef.TRTC_LOG_LEVEL_NULL\n  */\n  setLogLevel(level: number): Promise<void> {\n    return TrtcReactNativeSdk.setLogLevel({ level: level });\n  }\n  /**\n  - 启用或禁用控制台日志打印\n  @param enabled\t指定是否启用，默认为禁止状态\n  */\n  setConsoleEnabled(enabled: boolean): Promise<void> {\n    return TrtcReactNativeSdk.setConsoleEnabled({\n      enabled: enabled,\n    });\n  }\n  /**\n  - 启用或禁用 Log 的本地压缩。\n  - 开启压缩后，log　存储体积明显减小，但需要腾讯云提供的 Python 脚本解压后才能阅读。 禁用压缩后，log　采用明文存储，可以直接用记事本打开阅读，但占用空间较大。\n  @param enabled\t指定是否启用，默认为启用状态\n  */\n  setLogCompressEnabled(enabled: boolean): Promise<void> {\n    return TrtcReactNativeSdk.setLogCompressEnabled({\n      enabled: enabled,\n    });\n  }\n  /**\n  - 修改日志保存路径\n  - 日志文件默认保存在 /app私有目录/files/log/tencent/liteav/ 下，如需修改, 必须在所有方法前调用，并且保证目录存在及应用有目录的读写权限。\n  @param path 存储日志路径\n  */\n  setLogDirPath(path: string): Promise<void> {\n    return TrtcReactNativeSdk.setLogDirPath({\n      path: path,\n    });\n  }\n  /**\n  - 调用实验性 API 接口\n  - 注意：该接口用于调用一些实验性功能\n  @param jsonStr\t接口及参数描述的 JSON 字符串\n  */\n  callExperimentalAPI(jsonStr: string): Promise<void> {\n    return TrtcReactNativeSdk.callExperimentalAPI({\n      jsonStr: jsonStr,\n    });\n  }\n}\nexport {\n  TXVideoView,\n  TRTCParams,\n  TRTCCloudDef,\n  TXVoiceChangerType,\n  TXVoiceReverbType,\n  TRTCCloudListener,\n  TRTCSwitchRoomConfig,\n  TRTCPublishCDNParam,\n  TRTCAudioRecordingParams,\n  AudioMusicParam,\n  TXSystemVolumeType,\n  TRTCVideoEncParam,\n  TRTCNetworkQosParam,\n  TRTCTranscodingConfig,\n};\n"]}