{"version":3,"sources":["tx_device_manager.tsx"],"names":["TrtcReactNativeSdk","NativeModules","TXDeviceManager","isFrontCamera","switchCamera","getCameraZoomMaxRatio","setCameraZoomRatio","value","toString","enableCameraAutoFocus","enable","isAutoFocusEnabled","setCameraFocusPosition","x","y","enableCameraTorch","setSystemVolumeType","type","setAudioRoute","route"],"mappings":";;;;;;;AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAyBC,0BAA/B,C,CAEA;;AACe,MAAMC,eAAN,CAAsB;AACnC;AACF;AACA;AACA;AACEC,EAAAA,aAAa,GAAqB;AAChC,WAAOH,kBAAkB,CAACG,aAAnB,EAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,YAAY,CAACD,aAAD,EAAwC;AAClD,WAAOH,kBAAkB,CAACI,YAAnB,CAAgC;AAAED,MAAAA;AAAF,KAAhC,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,qBAAqB,GAAoB;AACvC,WAAOL,kBAAkB,CAACK,qBAAnB,EAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,kBAAkB,CAACC,KAAD,EAA+B;AAC/C,WAAOP,kBAAkB,CAACM,kBAAnB,CAAsC;AAC3CC,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN;AADoC,KAAtC,CAAP;AAGD;AACD;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,qBAAqB,CAACC,MAAD,EAAmC;AACtD,WAAOV,kBAAkB,CAACS,qBAAnB,CAAyC;AAC9CC,MAAAA,MAAM,EAAEA;AADsC,KAAzC,CAAP;AAGD;AACD;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,kBAAkB,GAAqB;AACrC,WAAOX,kBAAkB,CAACW,kBAAnB,EAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,sBAAsB,CAACC,CAAD,EAAYC,CAAZ,EAAsC;AAC1D,WAAOd,kBAAkB,CAACY,sBAAnB,CAA0C;AAC/CC,MAAAA,CAAC,EAAEA,CAD4C;AAE/CC,MAAAA,CAAC,EAAEA;AAF4C,KAA1C,CAAP;AAID;AACD;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,iBAAiB,CAACL,MAAD,EAAoC;AACnD,WAAOV,kBAAkB,CAACe,iBAAnB,CAAqC;AAC1CL,MAAAA,MAAM,EAAEA;AADkC,KAArC,CAAP;AAGD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,mBAAmB,CAACC,IAAD,EAA8B;AAC/C,WAAOjB,kBAAkB,CAACgB,mBAAnB,CAAuC;AAC5CC,MAAAA,IAAI,EAAEA;AADsC,KAAvC,CAAP;AAGD;AACD;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,aAAa,CAACC,KAAD,EAA+B;AAC1C,WAAOnB,kBAAkB,CAACkB,aAAnB,CAAiC;AACtCC,MAAAA,KAAK,EAAEA;AAD+B,KAAjC,CAAP;AAGD;;AAnGkC","sourcesContent":["import { NativeModules } from 'react-native';\nconst { TrtcReactNativeSdk } = NativeModules;\n\n/// 设备管理\nexport default class TXDeviceManager {\n  /**\n  - 是否使用前置摄像头\n  - 注意：此接口只支持和Android和iOS平台\n  */\n  isFrontCamera(): Promise<boolean> {\n    return TrtcReactNativeSdk.isFrontCamera();\n  }\n  /**\n  - 切换摄像头。\n  - 注意：此接口只支持和Android和iOS平台\n  @param isFrontCamera:  true 前置摄像头   false 后置摄像头\n  */\n  switchCamera(isFrontCamera: boolean): Promise<void> {\n    return TrtcReactNativeSdk.switchCamera({ isFrontCamera });\n  }\n  /**\n  - 获取摄像头的缩放因子\n  - 注意：此接口只支持和Android和iOS平台\n  @return  最大缩放倍数\n  */\n  getCameraZoomMaxRatio(): Promise<number> {\n    return TrtcReactNativeSdk.getCameraZoomMaxRatio();\n  }\n  /**\n  - 设置摄像头缩放因子（焦距）。\n  - 注意：此接口只支持和Android和iOS平台\n  - 取值范围1 - 5，取值为1表示最远视角（正常镜头），取值为5表示最近视角（放大镜头）。 最大值推荐为5，若超过5，视频数据会变得模糊不清。\n  @param value\t取值范围为1 - 5，数值越大，焦距越远\n  @return 0：操作成功 负数：失败\n  */\n  setCameraZoomRatio(value: number): Promise<void> {\n    return TrtcReactNativeSdk.setCameraZoomRatio({\n      value: value.toString(),\n    });\n  }\n  /**\n  - 设置是否自动识别人脸位置\n  - 注意：此接口只支持和Android和iOS平台\n  @param enable true：开启；false：关闭，默认值：true\n  @return 0：操作成功 负数：失败\n  */\n  enableCameraAutoFocus(enable: boolean): Promise<number> {\n    return TrtcReactNativeSdk.enableCameraAutoFocus({\n      enable: enable,\n    });\n  }\n  /**\n  - 查询是否支持自动识别人脸位置\n  - 注意：此接口只支持和Android和iOS平台\n  @return 返回值：true 支持  false：不支持\n  */\n  isAutoFocusEnabled(): Promise<boolean> {\n    return TrtcReactNativeSdk.isAutoFocusEnabled();\n  }\n  /**\n  - 设置摄像头焦点。\n  - 注意：此接口只支持和Android和iOS平台\n  @param x\t对焦位置 x 坐标\n  @param y\t对焦位置 y 坐标\n  */\n  setCameraFocusPosition(x: number, y: number): Promise<void> {\n    return TrtcReactNativeSdk.setCameraFocusPosition({\n      x: x,\n      y: y,\n    });\n  }\n  /**\n  - 开关闪光灯。\n  - 注意：此接口只支持和Android和iOS平台\n  @param enable\ttrue：开启；false：关闭，默认值：false\n  */\n  enableCameraTorch(enable: boolean): Promise<boolean> {\n    return TrtcReactNativeSdk.enableCameraTorch({\n      enable: enable,\n    });\n  }\n  /**\n  - 设置通话时使用的系统音量类型。\n  - 注意：此接口只支持和Android和iOS平台\n  - 智能手机一般具备两种系统音量类型，即通话音量类型和媒体音量类型。\n  - SDK 目前提供了三种系统音量类型的控制模式，分别为：    * TRTCCloudDef.TRTCSystemVolumeTypeAuto： “麦上通话，麦下媒体”，即主播上麦时使用通话音量，观众不上麦则使用媒体音量，适合在线直播场景。 如果您在 enterRoom 时选择的场景为 TRTCCloudDef.TRTC_APP_SCENE_LIVE 或 TRTCCloudDef.TRTC_APP_SCENE_VOICE_CHATROOM，SDK 会自动选择该模式。    * TRTCCloudDef.TRTCSystemVolumeTypeVOIP： 通话全程使用通话音量，适合多人会议场景。 如果您在 enterRoom 时选择的场景为 TRTCCloudDef.TRTC_APP_SCENE_VIDEOCALL 或 TRTCCloudDef.TRTC_APP_SCENE_AUDIOCALL，SDK 会自动选择该模式。    * TRTCCloudDef.TRTCSystemVolumeTypeMedia： 通话全程使用媒体音量，不常用，适合个别有特殊需求（如主播外接声卡）的应用场景。\n  - 注意：    * 需要在调用 startLocalAudio() 之前调用该接口。    * 如无特殊需求，不推荐您自行设置，您只需通过 enterRoom 设置好适合您的场景，SDK 内部会自动选择相匹配的音量类型。\n  @param type\t系统音量类型，如无特殊需求，不推荐您自行设置。\n  */\n  setSystemVolumeType(type: number): Promise<void> {\n    return TrtcReactNativeSdk.setSystemVolumeType({\n      type: type,\n    });\n  }\n  /**\n  - 设置音频路由。\n  - 微信和手机 QQ 视频通话功能的免提模式就是基于音频路由实现的。 一般手机都有两个扬声器，一个是位于顶部的听筒扬声器，声音偏小；一个是位于底部的立体声扬声器，声音偏大。 设置音频路由的作用就是决定声音使用哪个扬声器播放。\n  @param route\t音频路由，即声音由哪里输出（扬声器、听筒），请参考 TRTCCloudDef.TRTC_AUDIO_ROUTE_SPEAKER，默认值：TRTCCloudDef.TRTC_AUDIO_ROUTE_SPEAKER\n  */\n  setAudioRoute(route: number): Promise<void> {\n    return TrtcReactNativeSdk.setAudioRoute({\n      route: route,\n    });\n  }\n}\n"]}