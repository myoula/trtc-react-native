{"version":3,"sources":["tx_audio_effect_manager.tsx"],"names":["TrtcReactNativeSdk","NativeModules","TXAudioEffectManager","constructor","enableVoiceEarMonitor","enable","setVoiceEarMonitorVolume","volume","setVoiceReverbType","type","setVoiceChangerType","setVoiceCaptureVolume","startPlayMusic","musicParam","JSON","stringify","stopPlayMusic","id","pausePlayMusic","resumePlayMusic","setMusicPublishVolume","setMusicPlayoutVolume","setAllMusicVolume","setMusicPitch","pitch","toString","setMusicSpeedRate","speedRate","getMusicCurrentPosInMS","seekMusicToPosInMS","pts","getMusicDurationInMS","path"],"mappings":"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","sourcesContent":["import { NativeModules } from 'react-native';\nimport type {\n  TXVoiceChangerType,\n  TXVoiceReverbType,\n  AudioMusicParam,\n} from './trtc_cloud_def';\nconst { TrtcReactNativeSdk } = NativeModules;\n\n/// 腾讯云视频通话功能音乐和人声设置接口\nexport default class TXAudioEffectManager {\n  constructor() {}\n  /**\n  - 开启耳返\n  - 开启后会在耳机里听到自己的声音。\n  - 注意：仅在戴耳机时有效，暂时仅支持部分采集延迟较低的机型\n  @param enable true：开启；false：关闭\n  */\n  enableVoiceEarMonitor(enable: boolean): Promise<void> {\n    return TrtcReactNativeSdk.enableVoiceEarMonitor({ enable });\n  }\n  /**\n  - 设置耳返音量。\n  @param volume\t音量大小，取值0 - 100，默认值为100\n  */\n  setVoiceEarMonitorVolume(volume: number): Promise<void> {\n    return TrtcReactNativeSdk.setVoiceEarMonitorVolume({ volume });\n  }\n  /**\n  - 设置人声的混响效果（KTV、小房间、大会堂、低沉、洪亮...）\n  @param type\t默认为TXVoiceReverbType.TXLiveVoiceReverbType_0，详情见trtc_cloud.def文件中TXVoiceReverbType参数定义\n  */\n  setVoiceReverbType(type: TXVoiceReverbType): Promise<void> {\n    return TrtcReactNativeSdk.setVoiceReverbType({ type });\n  }\n  /**\n  - 设置人声的变声特效（萝莉、大叔、重金属、外国人...）\n  @param type\t默认为TXVoiceChangerType.TXLiveVoiceChangerType_0,详情见trtc_cloud.def文件中TXVoiceChangerType参数定义\n  */\n  setVoiceChangerType(type: TXVoiceChangerType): Promise<void> {\n    return TrtcReactNativeSdk.setVoiceChangerType({ type });\n  }\n  /**\n  - 设置麦克风采集人声的音量\n  @param volume\t音量大小，1为正常音量，范围是：[0 ~ 100] 之间的浮点数\n   */\n  setVoiceCaptureVolume(volume: number): Promise<void> {\n    return TrtcReactNativeSdk.setVoiceCaptureVolume({ volume });\n  }\n  /**\n  - 开始播放背景音乐\n  - 每个音乐都需要您指定具体的 ID，您可以通过该 ID 对音乐的开始、停止、音量等进行设置。\n  - 注意：若您想同时播放多个音乐，请分配不同的 ID 进行播放。 如果使用同一个 ID 播放不同音乐，SDK 会先停止播放旧的音乐，再播放新的音乐。\n  @param musicParam\t音乐参数，详情见trtc_cloud.dart中AudioMusicParam参数定义\n  @return true: 成功; false: 失败\n  */\n  startPlayMusic(musicParam: AudioMusicParam): Promise<boolean> {\n    return TrtcReactNativeSdk.startPlayMusic({\n      musicParam: JSON.stringify(musicParam),\n    });\n  }\n  /**\n  - 停止播放背景音乐\n  @param id 音乐 ID\n  */\n  stopPlayMusic(id: number): Promise<void> {\n    return TrtcReactNativeSdk.stopPlayMusic({ id: id });\n  }\n  /**\n  - 暂停播放背景音乐\n  @param id\t音乐 ID\n  */\n  pausePlayMusic(id: number): Promise<void> {\n    return TrtcReactNativeSdk.pausePlayMusic({ id: id });\n  }\n  /**\n  - 恢复播放背景音乐\n  @param id\t音乐 ID\n  */\n  resumePlayMusic(id: number): Promise<void> {\n    return TrtcReactNativeSdk.resumePlayMusic({ id: id });\n  }\n  /**\n  - 设置背景音乐的远端音量大小，即主播可以通过此接口设置远端观众能听到的背景音乐的音量大小。\n  @param id\t音乐 ID\n  @param volume\t音量大小，100为正常音量，取值范围为0 - 100；默认值：100\n  */\n  setMusicPublishVolume(id: number, volume: number): Promise<void> {\n    return TrtcReactNativeSdk.setMusicPublishVolume({ id: id, volume: volume });\n  }\n\n  /**\n  - 设置背景音乐的本地音量大小，即主播可以通过此接口设置主播自己本地的背景音乐的音量大小。\n  @param id\t音乐 ID\n  @param volume\t音量大小，100为正常音量，取值范围为0 - 100；默认值：100\n  */\n  setMusicPlayoutVolume(id: number, volume: number): Promise<void> {\n    return TrtcReactNativeSdk.setMusicPublishVolume({ id: id, volume: volume });\n  }\n  /**\n  - 设置全局背景音乐的本地和远端音量的大小\n  @param volume\t音量大小，100为正常音量，取值范围为0 - 100；默认值：100\n  */\n  setAllMusicVolume(volume: number): Promise<void> {\n    return TrtcReactNativeSdk.setAllMusicVolume({ volume: volume });\n  }\n  /**\n  - 调整背景音乐的音调高低\n  @param id\t音乐 ID\n  @param pitch\t音调，默认值是0.0f，范围是：[-1 ~ 1] 之间的浮点数；\n  */\n  setMusicPitch(id: number, pitch: number): Promise<void> {\n    return TrtcReactNativeSdk.setMusicPitch({\n      id: id,\n      pitch: pitch.toString(),\n    });\n  }\n  /**\n  - 调整背景音乐的变速效果\n  @param id\t音乐 ID\n  @param speedRate\t速度，默认值是1.0f，范围是：[0.5 ~ 2] 之间的浮点数；\n  */\n  setMusicSpeedRate(id: number, speedRate: number): Promise<void> {\n    return TrtcReactNativeSdk.setMusicSpeedRate({\n      id: id,\n      speedRate: speedRate.toString(),\n    });\n  }\n  /**\n  - 获取背景音乐当前的播放进度（单位：毫秒）\n  @param id\t音乐 ID\n  @return 成功返回当前播放时间，单位：毫秒，失败返回-1\n  */\n  getMusicCurrentPosInMS(id: number): Promise<number> {\n    return TrtcReactNativeSdk.getMusicCurrentPosInMS({ id: id });\n  }\n  /**\n  - 设置背景音乐的播放进度（单位：毫秒）\n  - 注意：请尽量避免频繁地调用该接口，因为该接口可能会再次读写音乐文件，耗时稍高。 当配合进度条使用时，请在进度条拖动完毕的回调中调用，而避免在拖动过程中实时调用。\n  @param id\t音乐 ID\n  @param pts\t单位: 毫秒\n  */\n  seekMusicToPosInMS(id: number, pts: number): Promise<void> {\n    return TrtcReactNativeSdk.seekMusicToPosInMS({ id: id, pts: pts });\n  }\n  /**\n  - 获取景音乐文件的总时长（单位：毫秒）\n  @param path\t音乐文件路径，如果 path 为空，那么返回当前正在播放的 music 时长。\n  @return 成功返回时长，失败返回-1\n  */\n  getMusicDurationInMS(path: string): Promise<number> {\n    return TrtcReactNativeSdk.getMusicDurationInMS({ path: path });\n  }\n}\n"]}